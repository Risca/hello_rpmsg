/* root of the configuration object model */
var Program = xdc.useModule('xdc.cfg.Program');

/* application uses the following modules and packages */
var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Log = xdc.useModule('xdc.runtime.Log');
var LoggerBuf = xdc.useModule('xdc.runtime.LoggerBuf');
var Memory = xdc.useModule('xdc.runtime.Memory')
var Text = xdc.useModule('xdc.runtime.Text');

var Swi = xdc.useModule('ti.sysbios.knl.Swi');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
var Hwi = xdc.useModule('ti.sysbios.hal.Hwi');

/*
 *  ======== IPC Configuration ========
 */
xdc.useModule('ti.ipc.ipcmgr.IpcMgr');

var BIOS = xdc.useModule('ti.sysbios.BIOS');
BIOS.addUserStartupFunction('&IpcMgr_rpmsgStartup');
/*
 *  ======== SYS/BIOS Configuration ========
 */
/*
if (Program.build.profile == "debug") {
    BIOS.libType = BIOS.LibType_Debug;
} else {
    BIOS.libType = BIOS.LibType_Custom;
}
*/
BIOS.libType = BIOS.LibType_Custom;
BIOS.smpEnabled = true; /* only support SMP mode on IPU */

/* -------------------------------- CORE0 ----------------------------------*/
var MultiProc = xdc.useModule('ti.sdo.utils.MultiProc');
MultiProc.setConfig("IPU", ["HOST", "IPU", "DSP"]);

xdc.loadPackage('ti.ipc.rpmsg');
xdc.loadPackage('ti.ipc.family.omap54xx');

/* no rts heap */
Program.argSize = 100;  /* minimum size */
Program.stack = 0x2000;

var Task = xdc.useModule('ti.sysbios.knl.Task');
Task.common$.namedInstance = true;

/* Remap the interrupt xbar mmr base address to match AMMU settings */
//var IntXbar = xdc.useModule('ti.sysbios.family.shared.vayu.IntXbar');
//IntXbar.mmrBaseAddr = 0x6A002000;

/* default memory heap */
var Memory = xdc.useModule('xdc.runtime.Memory');
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
var heapMemParams = new HeapMem.Params();
heapMemParams.size = 0x8000;
Memory.defaultHeapInstance = HeapMem.create(heapMemParams);

/* create a heap for MessageQ messages */
var HeapBuf = xdc.useModule('ti.sysbios.heaps.HeapBuf');
//var params = new HeapBuf.Params;
//params.align = 8;
//params.blockSize = 512;
//params.numBlocks = 256;
//var msgHeap = HeapBuf.create(params);

//var MessageQ  = xdc.useModule('ti.sdo.ipc.MessageQ');
//MessageQ.registerHeapMeta(msgHeap, 0);

/* Setup MessageQ transport */
//var VirtioSetup = xdc.useModule('ti.ipc.transports.TransportRpmsgSetup');
//MessageQ.SetupTransportProxy = VirtioSetup;

/* Setup NameServer remote proxy */
//var NameServer = xdc.useModule("ti.sdo.utils.NameServer");
//var NsRemote = xdc.useModule("ti.ipc.namesrv.NameServerRemoteRpmsg");
//NameServer.SetupProxy = NsRemote;

/* Enable Memory Translation module that operates on the BIOS Resource Table */
var Resource = xdc.useModule('ti.ipc.remoteproc.Resource');

/*  Use SysMin because trace buffer address is required for Linux/QNX
 *  trace debug driver, plus provides better performance.
 */
var System = xdc.useModule('xdc.runtime.System');
var SysMin = xdc.useModule('ti.trace.SysMin');
System.SupportProxy = SysMin;
SysMin.bufSize  = 0x8000;

Program.sectMap[".tracebuf"] = "TRACE_BUF";
Program.sectMap[".errorbuf"] = "EXC_DATA";

/*  Configure external timer base address to match resource table mapping.
 */
var dmTimer = xdc.useModule('ti.sysbios.timers.dmtimer.Timer');
/*
 * Resource table maps:
 * 0xA8000000 (IPU) -> 0x48000000 (L4)
 * 0xAA000000 (IPU) -> 0x4A000000 (L4)
 */ 
/* dmTimer 0 mapped to GPT3 */
dmTimer.timerSettings[0].baseAddr = 0xA8034000;
/* dmTimer 1 mapped to GPT4 */
dmTimer.timerSettings[1].baseAddr = 0xA8036000;
/* dmTimer 2 mapped to GPT9 */
dmTimer.timerSettings[2].baseAddr = 0xA803E000;
/* dmTimer 3 mapped to GPT11 */
dmTimer.timerSettings[3].baseAddr = 0xA8088000;

/* Skip the Timer frequency verification check. Need to remove this later */
dmTimer.checkFrequency = false;

/* Match this to the SYS_CLK frequency sourcing the dmTimers.
 * Not needed once the SYS/BIOS family settings is updated. */
dmTimer.intFreq.hi = 0;
dmTimer.intFreq.lo = 19200000;

/* use external timers because they keep running when IPU is not */
var halTimer = xdc.useModule('ti.sysbios.hal.Timer');
halTimer.TimerProxy = dmTimer;

/* ----------------------------- TICK ---------------------------------------*/
//var Clock = xdc.useModule('ti.sysbios.knl.Clock');
//Clock.tickSource = Clock.TickSource_USER;
/* Configure GPTimer3 as BIOS clock source */
//Clock.timerId = 0;

//var timerParams = new dmTimer.Params();
//timerParams.period = Clock.tickPeriod;
//timerParams.periodType = dmTimer.PeriodType_MICROSECS;
/* Smart-idle wake-up-capable mode */
//timerParams.tiocpCfg.idlemode = 0x3;
/* Wake-up generation for Overflow */
//timerParams.twer.ovf_wup_ena = 0x1;
//dmTimer.create(Clock.timerId, Clock.doTick, timerParams);

/* configure the IPU AMMU */
xdc.loadCapsule("IpuAmmu_omap5.cfg");

/* idle functions */
var Idle = xdc.useModule('ti.sysbios.knl.Idle');

/* function to flush unicache on each core */
Idle.addCoreFunc('&VirtQueue_cacheWb', 0);
Idle.addCoreFunc('&VirtQueue_cacheWb', 1);

xdc.useModule('ti.sysbios.xdcruntime.GateThreadSupport');
var GateSwi   = xdc.useModule('ti.sysbios.gates.GateSwi');

/*
 *  ======== Instrumentation Configuration ========
 */

/* system logger */
var LoggerSys = xdc.useModule('xdc.runtime.LoggerSys');
var LoggerSysParams = new LoggerSys.Params();
var Defaults = xdc.useModule('xdc.runtime.Defaults');
Defaults.common$.logger = LoggerSys.create(LoggerSysParams);

/* enable runtime Diags_setMask() for non-XDC spec'd modules */
var Diags = xdc.useModule('xdc.runtime.Diags');
Diags.setMaskEnabled = true;

/* override diags mask for selected modules */
xdc.useModule('xdc.runtime.Main');
Diags.setMaskMeta("xdc.runtime.Main",
    Diags.ENTRY | Diags.EXIT | Diags.INFO, Diags.RUNTIME_ON);
    
xdc.useModule('ti.ipc.rpmsg.RPMessage');
Diags.setMaskMeta("ti.ipc.rpmsg.RPMessage",
    Diags.INFO|Diags.USER1|Diags.STATUS, Diags.ALWAYS_ON);

Diags.setMaskMeta("ti.ipc.transports.TransportRpmsg",
    Diags.INFO|Diags.USER1|Diags.STATUS, Diags.ALWAYS_ON);
Diags.setMaskMeta("ti.ipc.transports.TransportRpmsgSetup",
    Diags.INFO|Diags.USER1|Diags.STATUS, Diags.ALWAYS_ON);
Diags.setMaskMeta("ti.ipc.family.omap54xx.VirtQueue",
    Diags.INFO|Diags.USER1|Diags.STATUS, Diags.ALWAYS_ON);
Diags.setMaskMeta("ti.ipc.%",
    Diags.INFO|Diags.USER1|Diags.STATUS, Diags.ALWAYS_ON);

var TransportRmsg = xdc.useModule('ti.ipc.transports.TransportRpmsg');
TransportRmsg.common$.diags_ENTRY = Diags.ALWAYS_ON;
TransportRmsg.common$.diags_EXIT  = Diags.ALWAYS_ON;
TransportRmsg.common$.diags_INFO  = Diags.ALWAYS_ON;
TransportRmsg.common$.diags_USER1 = Diags.ALWAYS_ON;

var Registry = xdc.useModule('xdc.runtime.Registry');
Registry.common$.diags_ENTRY = Diags.RUNTIME_ON;
Registry.common$.diags_EXIT  = Diags.RUNTIME_ON;
Registry.common$.diags_INFO  = Diags.RUNTIME_ON;
Registry.common$.diags_USER1 = Diags.RUNTIME_ON;
Registry.common$.diags_LIFECYCLE = Diags.RUNTIME_OFF;
Registry.common$.diags_STATUS = Diags.RUNTIME_OFF;

var Main = xdc.useModule('xdc.runtime.Main');
Main.common$.diags_INFO = Diags.ALWAYS_ON;
Main.common$.diags_ASSERT = Diags.ALWAYS_ON;
Main.common$.diags_INTERNAL = Diags.ALWAYS_ON;

var Hwi = xdc.useModule('ti.sysbios.family.arm.m3.Hwi');
Hwi.enableException = true;
Hwi.nvicCCR.DIV_0_TRP = 1;